config:
  target: 'http://localhost:3000'
  phases:
    # Warm-up phase
    - duration: 60
      arrivalRate: 5
      name: "Warm-up - 5 users"
    # Load test phase with 10 concurrent users
    - duration: 300
      arrivalRate: 10
      name: "Load Test - 10 users"
    # Stress test phase with 20 concurrent users
    - duration: 180
      arrivalRate: 20
      name: "Stress Test - 20 users"
    # Peak test phase with 30 concurrent users
    - duration: 120
      arrivalRate: 30
      name: "Peak Test - 30 users"
  
  # Default headers for all requests
  defaults:
    headers:
      'User-Agent': 'Artillery Load Test'
  
  # Load pre-authenticated session tokens
  payload:
    path: './test-sessions.csv'
    fields:
      - 'sessionToken'
      - 'userId'

scenarios:
  # Main scenario: Authenticated file upload and transcription
  - name: "Authenticated File Upload and Transcription"
    weight: 100
    flow:
      # Set authentication from CSV data
      - function: "setAuthFromPayload"
      
      # Visit dashboard to verify auth
      - get:
          url: "/dashboard"
          capture:
            - json: "$.user.id"
              as: "currentUserId"
      
      # Upload audio file
      - post:
          url: "/api/upload"
          beforeRequest: "prepareFileUpload"
          formData:
            file: "@test-files/sample-audio-{{ $randomInt(1, 5) }}.mp3"
          capture:
            - json: "$.audioId"
              as: "audioId"
      
      # Wait a bit for processing to start
      - think: 2
      
      # Check transcription status
      - get:
          url: "/api/transcription/status/{{ audioId }}"
          capture:
            - json: "$.transcriptionId"
              as: "transcriptionId"
      
      # Poll for completion (max 5 times)
      - loop:
          - get:
              url: "/api/transcription/{{ transcriptionId }}"
          - think: 5
        count: 5
      
      # Visit library to see results
      - get:
          url: "/library"

# Custom functions for handling authentication and file uploads
functions:
  setAuthFromPayload: |
    function(requestParams, context, ee, next) {
      // Set session token from CSV payload
      const sessionToken = context.vars.sessionToken;
      const userId = context.vars.userId;
      
      if (sessionToken) {
        requestParams.headers = requestParams.headers || {};
        // Set cookie for session-based auth
        requestParams.headers['Cookie'] = `next-auth.session-token=${sessionToken}`;
        // Also set as Authorization header if needed
        requestParams.headers['Authorization'] = `Bearer ${sessionToken}`;
        
        context.vars.authenticatedUserId = userId;
      }
      
      return next();
    }
  
  prepareFileUpload: |
    function(requestParams, context, ee, next) {
      // Ensure we have authentication headers
      const sessionToken = context.vars.sessionToken;
      if (sessionToken) {
        requestParams.headers = requestParams.headers || {};
        requestParams.headers['Cookie'] = `next-auth.session-token=${sessionToken}`;
      }
      
      // Set proper content type for file upload
      delete requestParams.headers['Content-Type']; // Let browser set multipart boundary
      
      return next();
    }